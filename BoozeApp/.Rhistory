lon_vector <- c(lon_vector, lon)
}
DF$Lat <- lat_vector
DF$Lon <- lon_vector
return(DF)
}
# Read in data
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
names(booze.coords) <- c("lat", "lon")
names(restaurants.coords) <- c("lat", "lon")
map + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.7)
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
map +  geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.7) +  geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.7)
#map + geom_point(data=rawdata, aes(x=rawdata$as.numeric.booze.location_1.longitude., y=rawdata$as.numeric.booze.location_1.latitude), color="red", size=3, alpha=0.7)
# Get just Lat and Long data
# rawdata is dataframe
# Convert to matrices
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
rawdata <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.7)
# data is matrix
data <- as.matrix(rawdata)
names(rawdata) <- c("lat", "lon")
data.pts <- SpatialPointsDataFrame(coords, rawdata)
nola <- get_map(location="New Orleans")
coords <- cbind(Longitude = as.numeric(booze$location_1.longitude), Latitude = as.numeric(booze$location_1.latitude))
ggmap(nola, extent = "device") + geom_point(aes(x = lon, y = lat), colour = "red",
alpha = 0.1, size = 2, data = rawdata)
# Restaurants
# 29.9500° N, 90.0667° W
library(ggmap)
library(ggplot2)
library(sp)
library(RSocrata)
# helper function for getting lat/lon from restaurant strings
restaurant_location <- function(location){
lat_lon <- strsplit(strsplit(location,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- as.numeric(gsub("\\(","",lat_lon[[1]][1]))
lon <- as.numeric(gsub("\\)","",lat_lon[[1]][2]))
return (c(lat, lon))
}
restaurant_add_lat_lon <- function(DF){
# get "(29.980464294000058, -90.08385663199994)"
lat_vector <-  c()
lon_vector <- c()
for (loc in DF$Location.1) {
lat_lon <- strsplit(strsplit(loc,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- gsub("\\(","",lat_lon[[1]][1])
lat_vector <- c(lat_vector, lat)
lon <- gsub("\\)","",lat_lon[[1]][2])
lon_vector <- c(lon_vector, lon)
}
DF$Lat <- lat_vector
DF$Lon <- lon_vector
return(DF)
}
# Read in data
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
names(restaurants.coords) <- c("lat", "lon")
# Convert to matrices
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.7)
# 29.9500° N, 90.0667° W
library(ggmap)
library(ggplot2)
library(sp)
library(RSocrata)
# helper function for getting lat/lon from restaurant strings
restaurant_location <- function(location){
lat_lon <- strsplit(strsplit(location,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- as.numeric(gsub("\\(","",lat_lon[[1]][1]))
lon <- as.numeric(gsub("\\)","",lat_lon[[1]][2]))
return (c(lat, lon))
}
restaurant_add_lat_lon <- function(DF){
# get "(29.980464294000058, -90.08385663199994)"
lat_vector <-  c()
lon_vector <- c()
for (loc in DF$Location.1) {
lat_lon <- strsplit(strsplit(loc,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- gsub("\\(","",lat_lon[[1]][1])
lat_vector <- c(lat_vector, lat)
lon <- gsub("\\)","",lat_lon[[1]][2])
lon_vector <- c(lon_vector, lon)
}
DF$Lat <- lat_vector
DF$Lon <- lon_vector
return(DF)
}
# Read in data
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='toner')
# format datasets
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
names(restaurants.coords) <- c("lat", "lon")
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
names(booze.coords) <- c("lat", "lon")
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.25) + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.25)
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
names(restaurants.coords) <- c("lat", "lon")
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
names(booze.coords) <- c("lat", "lon")
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.25) + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.25)
View(restaurants.coords)
View(restaurants.cleaned)
View(restaurants.cleaned)
View(coords)
# Booze-Orleans
# 29.9500° N, 90.0667° W
library(ggmap)
library(ggplot2)
library(sp)
library(RSocrata)
# helper function for getting lat/lon from restaurant strings
restaurant_location <- function(location){
# get "(29.980464294000058, -90.08385663199994)"
lat_lon <- strsplit(strsplit(location,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- as.numeric(gsub("\\(","",lat_lon[[1]][1]))
lon <- as.numeric(gsub("\\)","",lat_lon[[1]][2]))
return (c(lat, lon))
}
restaurant_add_lat_lon <- function(DF){
# get "(29.980464294000058, -90.08385663199994)"
lat_vector = NULL
lon_vector = NULL
for (loc in DF$Location.1) {
lat_lon <- strsplit(strsplit(DF$Location.1,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- as.numeric(gsub("\\(","",lat_lon[[1]][1]))
lat_vector <- c(lat_vector, lat)
lon <- as.numeric(gsub("\\)","",lat_lon[[1]][2]))
lon_vector <- c(lon_vector, lon)
}
DF$Lat <- lat_vector
DF$Lon <- lon_vector
return(DF)
}
# Read in data
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
names(booze.coords) <- c("lat", "lon")
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
names(restaurants.coords) <- c("lat", "lon")
# Convert to matrices
map + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.7)
library(ggmap)a
library(ggplot2)
library(sp)
library(RSocrata)
# helper function for getting lat/lon from restaurant strings
restaurant_location <- function(location){
lat_lon <- strsplit(strsplit(location,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- as.numeric(gsub("\\(","",lat_lon[[1]][1]))
lon <- as.numeric(gsub("\\)","",lat_lon[[1]][2]))
return (c(lat, lon))
}
restaurant_add_lat_lon <- function(DF){
# get "(29.980464294000058, -90.08385663199994)"
lat_vector <-  c()
lon_vector <- c()
for (loc in DF$Location.1) {
lat_lon <- strsplit(strsplit(loc,"\n")[[1]][3], ", ")
# trim the "(" & ")"
lat <- gsub("\\(","",lat_lon[[1]][1])
lat_vector <- c(lat_vector, lat)
lon <- gsub("\\)","",lat_lon[[1]][2])
lon_vector <- c(lon_vector, lon)
}
DF$Lat <- lat_vector
DF$Lon <- lon_vector
return(DF)
}
# Read in data
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
names(restaurants.coords) <- c("lat", "lon")
names(booze.coords) <- c("lat", "lon")
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.25) + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.25)
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
restaurants <- read.socrata('https://data.nola.gov/resource/utqx-f83p.csv')
# Wrangle restaurant data
restaurants.cleaned <- restaurant_add_lat_lon(restaurants)
# map
map <- qmap('New Orleans', zoom=12, maptype='hybrid')
# format datasets
restaurants.coords <- data.frame(as.numeric(restaurants.cleaned$Lat), as.numeric(restaurants.cleaned$Lon))
names(restaurants.coords) <- c("lat", "lon")
booze.coords <- data.frame(as.numeric(booze$location_1.latitude), as.numeric(booze$location_1.longitude))
names(booze.coords) <- c("lat", "lon")
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.25) + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.25)
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.5) + geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.5)
map + geom_point(data=restaurants.coords, aes(x=lon, y=lat), color="blue", size=3, alpha=0.5) #+ geom_point(data=booze.coords, aes(x=lon, y=lat), color="red", size=3, alpha=0.5)
# Data
library(RSocrata)
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
hood_shape <- readOGR("data/ZillowNeighborhoods-LA/", "ZillowNeighborhoods-LA", verbose = FALSE)
# DWI Data
dwi.2011 <- read.csv(file = "data/2011_DWI.geo.csv")
names(dwi.2011) <- c("date","address","lat","lon")
shiny::runApp('Code/booze-orleans/BoozeApp')
dwi.2011 <- read.csv(file = "data/2011_DWI.geo.csv")
names(dwi.2011) <- c("date","address","lat","lon")
setwd("Code//booze-orleans/BoozeApp/")
dwi.2011 <- read.csv(file = "data/2011_DWI.geo.csv")
names(dwi.2011) <- c("date","address","lat","lon")
dwi <- dwi.2011 %>% filter(dwidate >= date())
dwi <- dwi.2011 %>% filter(dwidate >= date())
shiny::runApp()
leaflet(
) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(
lng = -90.08385663199994,
lat = 29.980464294000058,
zoom = 11
) %>%
addMarkers(
data = booze,
booze$location_1.longitude,
booze$location_1.latitude,
popup = paste(booze$trade_name, booze$address, sep=": "),
clusterOptions = markerClusterOptions()
) %>%
addPolygons(
data=hood_shape,
weight=2,
color ='#FF0000',
fill = FALSE
) %>%
addCircleMarkers(
data = dwi.2011,
lng = as.numeric(dwi.2011$lon),
lat = as.numeric(dwi.2011$lat),
weight = 1,
radius= 5,
fillOpacity = 0.5,
color = '#F1234',
popup = paste(dwi.2011$address, dwi.2011$date, sep=": ")
)
booze <- read.socrata('https://data.nola.gov/resource/uiry-as9x.json')
hood_shape <- readOGR("data/ZillowNeighborhoods-LA/", "ZillowNeighborhoods-LA", verbose = FALSE)
# DWI Data
dwi.2011 <- read.csv(file = "data/2011_DWI.geo.csv")
names(dwi.2011) <- c("date","address","lat","lon")
# Define server logic
shinyServer(function(input, output, session) {
# Create Map
output$map <- renderLeaflet({
leaflet(
) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
) %>%
lng = -90.08385663199994,
setView(
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
lat = 29.980464294000058,
zoom = 11
) %>%
addMarkers(
data = booze,
booze$location_1.longitude,
booze$location_1.latitude,
popup = paste(booze$trade_name, booze$address, sep=": "),
clusterOptions = markerClusterOptions()
) %>%
addPolygons(
data=hood_shape,
weight=2,
color ='#FF0000',
fill = FALSE
) %>%
addCircleMarkers(
data = dwi.2011,
lng = as.numeric(dwi.2011$lon),
lat = as.numeric(dwi.2011$lat),
weight = 1,
radius= 5,
fillOpacity = 0.5,
color = '#F1234',
popup = paste(dwi.2011$address, dwi.2011$date, sep=": ")
)
})
#Select Shape
leaflet(
) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(
lng = -90.08385663199994,
lat = 29.980464294000058,
zoom = 11
) %>%
addMarkers(
data = booze,
booze$location_1.longitude,
booze$location_1.latitude,
popup = paste(booze$trade_name, booze$address, sep=": "),
clusterOptions = markerClusterOptions()
) %>%
addPolygons(
data=hood_shape,
weight=2,
color ='#FF0000',
fill = FALSE
) %>%
addCircleMarkers(
data = dwi.2011,
lng = as.numeric(dwi.2011$lon),
lat = as.numeric(dwi.2011$lat),
weight = 1,
radius= 5,
fillOpacity = 0.5,
color = '#F1234',
popup = paste(dwi.2011$address, dwi.2011$date, sep=": ")
)
leaflet(
) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(
lng = -90.08385663199994,
lat = 29.980464294000058,
zoom = 11
) %>%
addMarkers(
data = booze,
booze$location_1.longitude,
booze$location_1.latitude,
popup = paste(booze$trade_name, booze$address, sep=": "),
clusterOptions = markerClusterOptions()
) %>%
addPolygons(
data=hood_shape,
weight=2,
color ='#FF0000',
fill = FALSE
) %>%
addCircleMarkers(
data = dwi.2011,
lng = as.numeric(dwi.2011$lon),
lat = as.numeric(dwi.2011$lat),
weight = 1,
radius= 5,
fillOpacity = 0.5,
color = '#F1234',
popup = paste(dwi.2011$address, dwi.2011$date, sep=": ")
)
shiny::runApp()
dwi.2011
dwi.2011$date
testdf <- [dwi.2011$date %in% as.Date(c('1/1/2011', '2/1/2011'))
testdf <- [dwi.2011$date %in% as.Date(c('1/1/2011', '2/1/2011')),]
dwi.2011[dwi.2011$date %in% as.Date(c('1/1/2011', '2/1/2011')),]
dwi.2011
dwi.2011$date
as.Date(dwi.2011$date_
as.Date(dwi.2011$date)
as.Date(dwi.2011$date)
as.Date('12/12/2011')
as.Date('12/12/2011', "%m/%d/%Y")
as.Date(dwi.2011$date, "%m/%d/%Y")
dwi.2011$date
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.Date(dwi.2011$date, "%m/%d/%Y")
shiny::runApp()
dwi.2011[as.Date(dwi.2011$date, %m/%d/%Y") %in% as.Date(c('1/1/2011', '2/1/2011'))
dwi.2011[as.Date(dwi.2011$date, "%m/%d/%Y") %in% as.Date(c('1/1/2011', '2/1/2011'))
dwi.2011[as.Date(dwi.2011$date, "%m/%d/%Y") %in% as.Date(c('1/1/2011', '2/1/2011'))
dwi.2011[as.Date(dwi.2011$date, "%m/%d/%Y") %in% as.Date(c('1/1/2011', '2/1/2011'))
dwi.2011[as.Date(dwi.2011$date, "%m/%d/%Y")) %in% as.Date(c('1/1/2011', '2/1/2011'))
as.Date(dwi.2011$date, "%m/%d/%Y")
ls
dwi.2011$date <- as.Date(dwi.2011$date, "%m/%d/%Y")
dwi.2011
dwi.2011$date
dwi.2011[dwi.2011$date %in% as.Date(c('1/1/2011', '2/1/2011'))
v
v
dv
dwi.2011[dwi.2011$ ]
dwi.2011[dwi.2011$ ]
dwi.2011$date
dwi.2011[dwi.2011$date %in% as.Date(c('2011-01-01','2011-01-10')),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
filteredDWI <- reactive({
dwi.2011[dwi.2011$date %in% as.Date(input$dateRange),]
})
filteredDWI()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
addCircleMarkers(
data = filteredDWI(),
lng = as.numeric(lon),
lat = as.numeric(lat),
weight = 1,
radius= 5,
fillOpacity = 0.5,
color = '#F1234',
popup = paste(dwi.2011$address, dwi.2011$date, sep=": ")
)
dwi.2011[dwi.2011$date %in% as.Date(input$dateRange),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.numeric(filteredDWI$lat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dwi.2011 <- read.csv(file = "data/2011_DWI.geo.csv")
names(dwi.2011) <- c("date","address","lat","lon")
dwi.2011$date <- as.Date(dwi.2011$date, "%m/%d/%Y")
class(dwi.2011$lat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dwi.2011[dwi.2011$date %in% c("2011-01-01", "2011-02-01")]
dwi.2011[dwi.2011$date %in% c("2011-01-01", "2011-02-01"),]
dwi.2011[dwi.2011$date %in% c(as.Date("2011-01-01"), as.Date("2011-02-01"),]
dwi.2011[dwi.2011$date %in% c(as.Date("2011-01-01"), as.Date("2011-02-01")),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
